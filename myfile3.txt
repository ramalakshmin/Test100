#Region "IMPORTS"
Imports System.Data
Imports Gss.DPS.FX.Client.Common.Stores
Imports Gss.DPS.FX.Client.UI.Core.Events
Imports Gss.DPS.FX.Client.UI.Core
Imports Gss.DPS.FX.Client.UI.Window
Imports Gss.DPS.FX.Client.Cache.Services
Imports Gss.DPS.FX.Client.UI.Controls.Native
Imports Gss.DPS.FX.Client.Common
Imports Gss.DPS.FX.Client.Services
Imports System.Text
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.IO
Imports System.Threading.Tasks
Imports Gss.DPS.FX.Common.Encryption
#End Region

Public Class WSystemSelection

    Private clsAuthenticationsvc As AuthenticationService
    Public Shared Property Window As FrameworkElement
    Private Clustercode As String = ""
    Private dtfilter As DataTable = Nothing
    Private intcount As Integer = 100
    Private lstclustercode As New List(Of String)
    Private mdtSysTree As DataTable = Nothing
    Private Delegate Sub EmptyDelegate()
    Private mAPP_ID As Integer = 0
    Private mROLE_LEVEL As String = ""
    Private mAPP_DESCRIPTION As String = ""
    Private mAPPU_ID As Integer = 0
    'Private mAPPS_ID As Integer = 0
    Private mAPPST_ID As Integer = 0
    Private mAPPSTS_ID As Integer = 0
    Private mAPPUSTS_ID As Integer = 0
    Private mWFT_CODE As String = ""



#Region "METHODS - EVENT HANDLERS"

    Private Sub SYS_SEL_DLG_OK_BTN_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Handles SYS_SEL_DLG_OK_BTN.Click
        LoadMainWindow()
    End Sub


    Private Sub LoadMainWindow()

        If __IsSessionConstantAssigned() Then
            ScanAndImageSettingsHelper.SettingsLoaded = False
            ScanAndImageSettingsHelper.UserOptionsLoaded = False

            EventsHelper.RaiseInitializeMenuControl()
            ' EventsHelper.RaiseLoadSettings()

            __SetSystemInfo()
            ' __SetsystemUserOption()
            'Assigning Session Timeout
            If Not SessionInfoStore.TimeoutAssigned Then
                __SetSessionTimeOut()
            End If

            Me.DialogResult = True
        End If

    End Sub
    Private Sub WSystemSelection_Closed(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Closed

        If Me.DialogResult = False Then
            If TypeOf Window Is DPSWindow Then
                Return
            End If
            If TypeOf SYS_SEL_DLG_TV.SelectedItem Is DPSSystem Then
                Dim tvSelected As DPSSystem = SYS_SEL_DLG_TV.SelectedItem
                If tvSelected Is Nothing Then
                    Dim system_userid As Integer = 0
                    Logout(system_userid)
                Else

                    If tvSelected.APPU_ID = Nothing Then
                        Dim system_userid As Integer = 0
                        Logout(system_userid)
                    Else
                        Dim systemuserId As Integer = CInt(tvSelected.APPU_ID)
                        Logout(systemuserId)
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub Logout(ByVal Systemuserid As Integer)
        Dim sb As New StringBuilder()
        Dim Unlock As String = "Y"
        Dim user_Id As Integer = CInt(SessionInfoStore.Item(SessionInfoStoreConstants.U_ID))
        clsAuthenticationsvc = AuthenticationService.CreateInstance()
        Dim sp As New Stopwatch
        sp.Start()
        clsAuthenticationsvc.Logout(Systemuserid, Unlock, user_Id)
        sp.Stop()
        Dim ts As TimeSpan = sp.Elapsed
        Dim elapsedTime As String = String.Format("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds)
        sb.AppendLine("Logout service started")
        sb.AppendLine(vbTab & vbTab & vbTab & "Total execution time for logout service : " & "(" & elapsedTime & ")")
        sb.AppendLine(vbTab & vbTab & vbTab & "Logout service ended")
        Trace.WriteLine(sb.ToString)
    End Sub

    Private Sub WSystemSelection_Initialized(sender As Object, e As System.EventArgs) Handles Me.Initialized
        SYS_SEL_DLG_LGOF_IMG.Source = ResourceHelper.GetFxResource("SYS_SEL_DLG_LGOF_IMG")
    End Sub

    Private Sub WSystemSelection_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Input.KeyEventArgs) Handles Me.KeyDown
        If e.Key = Key.Escape Then
            Me.DialogResult = False
            Me.Close()
        ElseIf e.Key = Key.F6 AndAlso e.KeyboardDevice.Modifiers = ModifierKeys.Control Then
            Dim t As Task = Task.Factory.StartNew((Sub()
                                                       Dispatcher.Invoke(New EmptyDelegate(Sub()
                                                                                               SYS_SEL_DLG_MSG_LBL.Content = "Sync InProgress..."
                                                                                           End Sub))

                                                       SyncService.CreateInstance.DataSync()
                                                       Dispatcher.Invoke(New EmptyDelegate(Sub()
                                                                                               SYS_SEL_DLG_MSG_LBL.Content = "Sync Completed"
                                                                                           End Sub))
                                                   End Sub))
            t.ContinueWith(Sub()
                               Dispatcher.Invoke(New EmptyDelegate(Sub()
                                                                       Dispatcher.Invoke(New EmptyDelegate(Sub()
                                                                                                               SYS_SEL_DLG_MSG_LBL.Content = "Sync Completed"
                                                                                                           End Sub))

                                                                       Throw t.Exception.InnerException
                                                                   End Sub))

                           End Sub, TaskContinuationOptions.OnlyOnFaulted)



        End If

    End Sub

    Private Sub __ApplicationSelection(ByVal sender As Object, ByVal e As RoutedEventArgs)

    End Sub

    Private Sub WSystemSelection_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
        If Not String.IsNullOrEmpty(SessionInfoStore.Item(SessionInfoStoreConstants.LAST_SUCCESSFUL_LOGIN)) Then
            SYS_SEL_DLG_LGN_SUCC_VALUE_LBL.Content = CType(SessionInfoStore.Item(SessionInfoStoreConstants.LAST_SUCCESSFUL_LOGIN).ToString(), Date).ToString("r")

            SYS_SEL_DLG_LGN_SUCC_MSG_SPNL.Visibility = Windows.Visibility.Visible
        Else
            SYS_SEL_DLG_LGN_SUCC_MSG_SPNL.Visibility = Windows.Visibility.Collapsed
        End If
        If Not String.IsNullOrEmpty(SessionInfoStore.Item(SessionInfoStoreConstants.LAST_UNSUCCESSFUL_LOGIN)) Then
            SYS_SEL_DLG_LGN_UNSUCC_VALUE_LBL.Content = CType(SessionInfoStore.Item(SessionInfoStoreConstants.LAST_UNSUCCESSFUL_LOGIN).ToString(), Date).ToString("r")
            SYS_SEL_DLG_LGN_UNSUCC_MSG_SPNL.Visibility = Windows.Visibility.Visible
        Else
            SYS_SEL_DLG_LGN_UNSUCC_MSG_SPNL.Visibility = Windows.Visibility.Collapsed
        End If

        Me.Icon = ResourceHelper.GetFxResource("SYSTEM_SEL_WIN")

        Dim dtUserApps As DataTable = SystemCache.GetUserApplications(SessionInfoStore.Item(SessionInfoStoreConstants.U_ID))
        If dtUserApps Is Nothing OrElse dtUserApps.Rows.Count = 0 Then
            SYS_SEL_DLG_MSG_LBL.Content = "No Applications for the Current User"
            Exit Sub
        End If
        SYS_SEL_DLG_WPNL.Items.Clear()
        Dim itmsrc As New DPSApplications
        For Each drUserApp As DataRow In dtUserApps.Rows
            Dim objApp As New DPSApplication
            objApp.FillData(objApp.GetType(), objApp, drUserApp)
            itmsrc.Add(objApp)
        Next
        Dim cvs As New CollectionViewSource
        cvs.Source = itmsrc
        cvs.SortDescriptions.Add(New SortDescription("APP_ID", ListSortDirection.Ascending))
        dtApplications = FilterLicenseData("APPLICATIONS")
        SYS_SEL_DLG_WPNL.ItemsSource = cvs.View
        SYS_SEL_DLG_WPNL.SelectedIndex = 0
    End Sub

    Private Sub __LoadSystemTree()

        Dim dtSystems As DataTable = SystemCache.SystemsForUser(mAPPU_ID)
        Dim dv As New DataView(dtSystems)

        Dim dtSys As DataTable = dv.ToTable(True, (From col In dtSystems.Columns Let ColRes = CType(col, DataColumn) Select ColRes.ColumnName).ToArray())

        Using dtUserSystems As DataTable = dtSys
            mdtSysTree = dtUserSystems
            'Add new Column for VISIBLE

            Dim dc As New DataColumn("VISIBLE", GetType(String))
            dc.DefaultValue = "Y"
            dtUserSystems.Columns.Add(dc)

            Dim dcisenable As New DataColumn("IS_ENABLE", GetType(String))
            dcisenable.DefaultValue = "Y"
            dtUserSystems.Columns.Add(dcisenable)

            Dim dcgroup As New DataColumn("GROUPING", GetType(String))
            dcgroup.DefaultValue = 0
            dtUserSystems.Columns.Add(dcgroup)



            'To Form the Treeview based on the Parent and Child System ID in Systens_to_systems table.
            __FormTreeView(dtUserSystems)

            Me.SYS_SEL_DLG_TV.Focus()
            If SYS_SEL_DLG_TV.Items.Count > 0 Then
                '  CType(SYS_SEL_DLG_TV.Items(0), Cluster).IsSelected = True
                '  CType(SYS_SEL_DLG_TV.Items(0), UITreeViewItem).IsSelected = True
                Dim tvSelected As DPSSystem = SYS_SEL_DLG_TV.SelectedItem
            End If
        End Using
    End Sub

    Dim vwLicense As DataTable
    Private Sub __FormTreeView(ByVal dtparent As DataTable)


        Dim dvcluster As New DataView(dtparent)
        dvcluster.Sort = "PARENT_S_ID"

        Dim dc As New DataColumn
        dc.ColumnName = "__IS_ADDED"
        dtparent.Columns.Add(dc)

        dtfilter = dtparent.Clone

        Dim dvSystems As New DataView(dtparent)

        Dim lstCluster As New Systems


        For Each drClusters As DataRow In dvcluster.ToTable(True, "CLUSTER_CODE").Rows
            Dim objsys As New DPSSystem
            dvSystems.RowFilter = "(PARENT_S_ID IS NULL OR PARENT_S_ID = 0)  AND CLUSTER_CODE='" & drClusters("CLUSTER_CODE").ToString() & "'"
            For Each drvSystem As DataRowView In dvSystems
                objsys.FillData(drvSystem.Row)
                If drvSystem.Row("FILTER").ToString() <> "SELECTED_NODE" Then
                    objsys.IS_ENABLE = "N"
                End If
                AddChildSystemForSys(objsys, dtparent)
                If objsys.IS_ENABLE = "N" Then
                    If Not (From child In objsys.Systems Select child.FILTER = "SELECTED_NODE").Any Then
                        objsys.VISIBLE = "N"
                    Else
                        lstCluster.Add(objsys, drClusters("CLUSTER_CODE").ToString())
                    End If
                Else
                    lstCluster.Add(objsys, drClusters("CLUSTER_CODE").ToString())
                End If
            Next
        Next

        ValidateSystemsLicense(lstCluster)
        SYS_SEL_DLG_TV.ItemsSource = lstCluster
    End Sub

    'Private Sub AddCluster(plstCluster As Systems, pDtparent As DataTable, pintParentID As Integer, pChildSys As DPSSystem, pClusterCode As String)
    '    Dim dvT As New DataView(pDtparent)
    '    dvT.RowFilter = String.Format("CLUSTER_CODE = '{0}'", pClusterCode.ToString())

    '    If pintParentID = -1 Then
    '        dvT.RowFilter = "PARENT_S_ID IS NULL OR PARENT_S_ID = 0"
    '    Else
    '        dvT.RowFilter = "PARENT_S_ID = " & pintParentID
    '    End If
    '    If dvT.Count > 0 Then
    '        For Each drvSystem As DataRowView In dvT
    '            Dim objsys As New DPSSystem
    '            If pintParentID = -1 Then
    '                pChildSys.FillData(drvSystem.Row)
    '                plstCluster.Add(pChildSys, drvSystem.Row("CLUSTER_CODE").ToString())
    '                objsys = pChildSys
    '            Else
    '                objsys.FillData(drvSystem.Row)
    '                pChildSys.AddChild(objsys, drvSystem.Row("CLUSTER_CODE").ToString())
    '            End If
    '            Dim intCHILD_APPS_ID As Integer = 0
    '            If Not IsDBNull(drvSystem.Row("CHILD_S_ID")) Then
    '                intCHILD_APPS_ID = drvSystem.Row("CHILD_S_ID")
    '            End If
    '            AddCluster(plstCluster, pDtparent, intCHILD_APPS_ID, objsys, pClusterCode)
    '        Next
    '    End If
    'End Sub

    'Private Sub MarkParentNode(dtparent As DataTable, intParentAPPSTSID As Integer, pClusterCode As String)
    '    Dim dvcluster As New DataView(dtparent)
    '    dvcluster.RowFilter = String.Format("CLUSTER_CODE = '{0}'", pClusterCode.ToString())
    '    'Dim dvT As DataView = dv
    '    dvcluster.RowFilter = String.Format("CHILD_S_ID= {0}", intParentAPPSTSID)
    '    If dvcluster.Count > 0 Then
    '        For Each drvSystem As DataRowView In dvcluster
    '            If drvSystem.Row("IS_ENABLE") <> "Y" Then
    '                drvSystem.Row("IS_ENABLE") = "N"
    '            End If
    '            drvSystem.Row("__IS_ADDED") = "Y"
    '            Dim intPARENT_APPS_ID As Integer = 0
    '            If Not IsDBNull(drvSystem.Row("PARENT_S_ID")) Then
    '                intPARENT_APPS_ID = drvSystem.Row("PARENT_S_ID")
    '            End If
    '            MarkParentNode(dtparent, intPARENT_APPS_ID, drvSystem.Row("CLUSTER_CODE"))
    '        Next
    '    End If
    'End Sub

    'Private Sub MarkChildNode(dtparent As DataTable, intChildAPPSTSID As Integer, pClusterCode As String)
    '    Dim dvcluster As New DataView(dtparent)
    '    dvcluster.RowFilter = String.Format("CLUSTER_CODE = '{0}'", pClusterCode.ToString())
    '    dvcluster.RowFilter = String.Format("PARENT_S_ID= {0}", intChildAPPSTSID)
    '    If dvcluster.Count > 0 Then
    '        For Each drvSystem As DataRowView In dvcluster
    '            drvSystem.Row("IS_ENABLE") = "Y"
    '            drvSystem.Row("__IS_ADDED") = "Y"
    '            Dim intCHILD_APPS_ID As Integer = 0
    '            If Not IsDBNull(drvSystem.Row("CHILD_S_ID")) Then
    '                intCHILD_APPS_ID = drvSystem.Row("CHILD_S_ID")
    '            End If
    '            MarkParentNode(dtparent, intCHILD_APPS_ID, drvSystem.Row("CLUSTER_CODE"))
    '        Next
    '    End If
    'End Sub


    Private Sub AddChildSystemForSys(ByVal pParent As DPSSystem, ByVal pData As DataTable)
        Dim dv As New DataView(pData)
        dv.RowFilter = String.Format(" PARENT_S_ID='{0}' AND CHILD_S_ID  <> {0} AND CLUSTER_CODE='{1}'", pParent.CHILD_S_ID, pParent.CLUSTER_CODE)
        For Each drvChild As DataRowView In dv
            Dim drChild As DataRow = drvChild.Row
            If Not drChild("__IS_ADDED").ToString() = "Y" Then
                drChild("__IS_ADDED") = "Y"
                intcount = intcount + 1
                drChild("GROUPING") = intcount
                dtfilter.ImportRow(drChild)
                Dim objChildSys As New DPSSystem
                objChildSys.FillData(drChild)

                If pParent.IS_ENABLE = "N" AndAlso drChild("FILTER").ToString() <> "SELECTED_NODE" Then
                    objChildSys.IS_ENABLE = "N"
                End If
                AddChildSystemForSys(objChildSys, pData)
                If objChildSys.IS_ENABLE = "N" Then
                    If objChildSys.Systems.Count > 0 AndAlso Not __HasSelectedNode(objChildSys) Then
                        objChildSys.VISIBLE = "N"
                    ElseIf objChildSys.Systems.Count = 0 Then
                        objChildSys.VISIBLE = "N"
                    Else
                        pParent.AddChild(objChildSys, pParent.CLUSTER_CODE)
                    End If
                Else
                    pParent.AddChild(objChildSys, pParent.CLUSTER_CODE)
                End If
            End If

        Next
    End Sub

    Private Function __HasSelectedNode(pSystem As DPSSystem) As Boolean
        For Each SYS As DPSSystem In pSystem.Systems
            If SYS.FILTER = "SELECTED_NODE" Then
                Return True
            End If
            Return __HasSelectedNode(SYS)
        Next
        Return False
    End Function

    Private Sub SYS_SEL_DLG_WPNL_SelectionChanged(ByVal sender As Object, ByVal e As System.Windows.Controls.SelectionChangedEventArgs) Handles SYS_SEL_DLG_WPNL.SelectionChanged
        SYS_SEL_DLG_TV.ItemsSource = Nothing
        SYS_SEL_DLG_MSG_LBL.Content = ""
        Dim selApp As DPSApplication = TryCast(SYS_SEL_DLG_WPNL.SelectedItem, DPSApplication)
        If Not selApp Is Nothing Then
            mAPP_ID = selApp.APP_ID
            mAPPU_ID = selApp.APPU_ID
            mROLE_LEVEL = selApp.ROLE_LEVEL
            mAPP_DESCRIPTION = selApp.APP_DESCRIPTION
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.APP_ID, selApp.APP_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_USER_ID, selApp.APPU_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.ROLE_LEVEL, selApp.ROLE_LEVEL)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.APP_DESCRIPTION, selApp.APP_DESCRIPTION)
            If validateApplicationLicense(mAPP_ID, selApp) = "True" Then
                If selApp.VALIDITY_LICENSE IsNot Nothing Then
                    If Not CheckDateExpired(selApp.VALIDITY_LICENSE.ValidityFrom, selApp.VALIDITY_LICENSE.ValidityTo) Then
                        SYS_SEL_DLG_MSG_LBL.Content = "LICENSE EXPIRED FOR  '" & selApp.APP_DESCRIPTION.ToUpper & "'"
                        Return
                    End If
                End If
                __LoadSystemTree()
            Else
                SYS_SEL_DLG_MSG_LBL.Content = "INVALID LICENSE FOR  '" & selApp.APP_DESCRIPTION.ToUpper & "'"
            End If
        End If
    End Sub

    Private Sub SYS_SEL_DLG_LGOF_BTN_Click(sender As Object, e As System.Windows.RoutedEventArgs) Handles SYS_SEL_DLG_LGOF_BTN.Click
        AuthenticationService.CreateInstance.Logout(0, "NO", SessionInfoStore.Item(SessionInfoStoreConstants.U_ID))
        Me.Close()
        __LoadWindow()
    End Sub

    Private Sub __LoadWindow()
        Dim dllgn As New Wlogin
        Dim dlgSysSel As New WSystemSelection
        Dim prevMainWindow As DPSWindow = Application.Current.MainWindow
        prevMainWindow.RemoveHandlers()
        prevMainWindow.Close()
        Dim dlgmain As DPSWindow = DPSWindow.CreateInstance
        Application.Current.MainWindow = dlgmain
        dllgn.ShowDialog()
        If dllgn.DialogResult.HasValue AndAlso dllgn.DialogResult.Value Then
            dlgSysSel.ShowDialog()
            If dlgSysSel.DialogResult.HasValue And dlgSysSel.DialogResult.Value Then
                dlgmain.ShowDialog()
            End If
        End If
    End Sub

    Private Sub SYS_SEL_DLG_TV_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Input.KeyEventArgs) Handles SYS_SEL_DLG_TV.KeyDown
        If Not SYS_SEL_DLG_OK_BTN.IsEnabled Then
            Return
        End If
        If e.Key = Key.Enter Then
            LoadMainWindow()
        End If
    End Sub

    Private Sub SYS_SEL_DLG_TV_MouseDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Input.MouseButtonEventArgs) Handles SYS_SEL_DLG_TV.MouseDoubleClick
        If Not SYS_SEL_DLG_OK_BTN.IsEnabled Then
            Return
        End If
        LoadMainWindow()
    End Sub

    Private Sub SYS_SEL_DLG_TV_SelectedItemChanged(ByVal sender As Object, ByVal e As System.Windows.RoutedPropertyChangedEventArgs(Of Object)) Handles SYS_SEL_DLG_TV.SelectedItemChanged
        SYS_SEL_DLG_MSG_LBL.Content = ""
        If SYS_SEL_DLG_TV.SelectedItem Is Nothing Then
            SYS_SEL_DLG_OK_BTN.IsEnabled = False
            Return
        End If
        If TypeOf SYS_SEL_DLG_TV.SelectedItem Is DPSSystem Then
            Dim objSystem As DPSSystem = SYS_SEL_DLG_TV.SelectedItem
            If objSystem.VISIBLE = "N" Then
                SYS_SEL_DLG_OK_BTN.IsEnabled = False
                Return
            End If

            If objSystem.IS_ENABLE = "N" Then    'License Checking
                SYS_SEL_DLG_MSG_LBL.Content = "This System is Not Assigned to the Current User."
                SYS_SEL_DLG_OK_BTN.IsEnabled = False
                Return
            Else
                If objSystem.LICENSE_VALIDITY IsNot Nothing Then 'License Date Checking
                    If Not CheckDateExpired(objSystem.LICENSE_VALIDITY.ValidityFrom, objSystem.LICENSE_VALIDITY.ValidityTo) Then
                        SYS_SEL_DLG_MSG_LBL.Content = "LICENSE EXPIRED FOR '" & objSystem.S_DESCRIPTION.ToUpper & "'"
                        SYS_SEL_DLG_OK_BTN.IsEnabled = False
                        Return
                    End If
                End If
            End If


            Dim strResultMsg As String = ""
            mAPPSTS_ID = objSystem.APPSTS_ID
            ''Assign Session Level Constants
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.S_ID, objSystem.S_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.ST_ID, objSystem.ST_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.STS_ID, objSystem.APPSTS_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.CLUSTER_CODE, objSystem.CLUSTER_CODE)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_LEVEL_CODE, objSystem.S_CODE)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_LEVEL, "S")

            'Get APPST_ID From Cache
            Dim strCondn As String = String.Format("APP_ID={0} AND ST_ID={1}", mAPP_ID, objSystem.ST_ID)
            Dim dtAPPST_ID As DataTable = UICache.GetTableData("APP_SYSTEM_TYPES", "", "", strCondn)
            If Not dtAPPST_ID.Rows.Count = 0 Then
                Dim int As Integer = CInt(dtAPPST_ID.Rows(0)("APPST_ID"))
                'SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPST_ID, int)
                mAPPST_ID = int
            End If

            'Get APPS_ID From Cache
            'Dim str As String = String.Format("APP_ID={0} AND S_ID={1}", mAPP_ID, objSystem.S_ID)
            'Dim dtAPPS_ID As DataTable = UICache.GetTableData("APP_SYSTEMS", "", "", str)
            'If Not dtAPPS_ID.Rows.Count = 0 Then
            '    Dim int As Integer = CInt(dtAPPS_ID.Rows(0)("APPS_ID"))
            '    'SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPS_ID, int)
            '    mAPPS_ID = int
            'End If

            'Get APPUSTS_ID From Cache
            Dim strCondition As String = String.Format("APPSTS_ID={0} AND APPU_ID={1}", objSystem.APPSTS_ID, mAPPU_ID)
            Dim dtAPPUSTS_ID As DataTable = UICache.GetTableData("APP_USER_STS", "", "", strCondition)
            If Not dtAPPUSTS_ID.Rows.Count = 0 Then
                Dim intAPPUSTS_ID As Integer = CInt(dtAPPUSTS_ID.Rows(0)("APPUSTS_ID"))
                'SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPUSTS_ID, intAPPUSTS_ID)
                mAPPUSTS_ID = intAPPUSTS_ID
            End If

            ' mAPPS_ID, mAPPST_ID, mAPPSTS_ID
            ' Call Service to check the Valid working time
            strResultMsg = Gss.DPS.FX.Client.Cache.Services.SystemCache.ValidateSystemSelection(mAPPU_ID, CInt(objSystem.S_ID), Now.ToString("MM/dd/yyyy HH:mm:ss"))
            If Not strResultMsg.ToUpper = "SUCCESS" Then
                SYS_SEL_DLG_OK_BTN.IsEnabled = False
                SYS_SEL_DLG_MSG_LBL.Content = strResultMsg
                SYS_SEL_DLG_MSG_LBL.Visibility = Windows.Visibility.Visible
                Return
            End If

            '  SYS_SEL_DLG_MSG_LBL.Visibility = Windows.Visibility.Hidden
            SYS_SEL_DLG_OK_BTN.IsEnabled = True

            Dim strWFT_CODE As String = SystemCache.GetWFTCode(mAPPST_ID, mAPPSTS_ID)
            If Not String.IsNullOrEmpty(strWFT_CODE) Then
                mWFT_CODE = strWFT_CODE
            Else
                SYS_SEL_DLG_MSG_LBL.Content = "Workflow not defined"
                SYS_SEL_DLG_OK_BTN.IsEnabled = False
            End If

        End If
    End Sub

#End Region

#Region "METHODS - PRIVATE"

    Private Function __IsSessionConstantAssigned() As Boolean
        If TypeOf SYS_SEL_DLG_TV.SelectedItem Is DPSSystem Then
            Dim tvSelected = SYS_SEL_DLG_TV.SelectedItem
            Dim objSystem As DPSSystem = tvSelected

            SessionInfoStore.AddToStore(SessionInfoStoreConstants.APP_ID, mAPP_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_USER_ID, mAPPU_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.ROLE_LEVEL, mROLE_LEVEL)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.APP_DESCRIPTION, mAPP_DESCRIPTION)

            If SessionInfoStore.Item(SessionInfoStoreConstants.SYSTEM_USER_ID) IsNot Nothing Then
                TransactionalService.CreateInstance.UnlockItems()
            End If

            'Assign Session Level Constants
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.S_ID, objSystem.S_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.ST_ID, objSystem.ST_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.STS_ID, objSystem.APPSTS_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.CLUSTER_CODE, objSystem.CLUSTER_CODE)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_LEVEL_CODE, objSystem.S_CODE)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_LEVEL, "S")

            SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPST_ID, mAPPST_ID)
            'SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPS_ID, mAPPS_ID)
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.APPUSTS_ID, mAPPUSTS_ID)

            SessionInfoStore.AddToStore(SessionInfoStoreConstants.WFT_CODE, mWFT_CODE)

            Trace.WriteLine("APPSTS_ID -- " & SessionInfoStore.Item(SessionInfoStoreConstants.STS_ID))
            Trace.WriteLine("APPST_ID -- " & SessionInfoStore.Item(SessionInfoStoreConstants.APPST_ID))

            Dim strRoles As String = SystemCache.SetSystemUserRole()
            If Not String.IsNullOrEmpty(strRoles) Then
                SessionInfoStore.AddToStore(SessionInfoStoreConstants.SYSTEM_USER_ROLE, strRoles)
                Trace.WriteLine("Assigned Role -- " & strRoles)
            Else
                SYS_SEL_DLG_MSG_LBL.Content = "Role Not Specified for the current User"
                SYS_SEL_DLG_OK_BTN.IsEnabled = False
                Return False
            End If
            Return True
        End If
        Return False
    End Function

    Private Sub __SetSystemInfo()
        Try
            UICache.SetResourceServers()
        Catch ex As Exception
            Trace.TraceWarning("Resource server is missing")
            Trace.TraceError(ex.Message.ToString)
        End Try
        SessionInfoStore.AddToStore(SessionInfoStoreConstants.RECORDS_PER_PAGE, UICache.GetSysSetupValue("GENERAL", "RECORDS_PER_PAGE"))

    End Sub
    Private Sub __SetsystemUserOption()
        Dim U_ID As Integer = SessionInfoStore.Item(SessionInfoStoreConstants.U_ID)
        Dim STS_ID As Integer = SessionInfoStore.Item(SessionInfoStoreConstants.STS_ID)
        Dim S_ID As Integer = SessionInfoStore.Item(SessionInfoStoreConstants.S_ID)
        Dim dtsystemuseroptions As DataTable = SystemCache.Getsystemuseroptions(U_ID, STS_ID, S_ID)
        'System_user_options
        If IsDBNull(dtsystemuseroptions.Columns("SYSTEM_USER_OPTION")) Then
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.USER_OPTIONS, dtsystemuseroptions.Columns("OPTIONS"))
        Else
            SessionInfoStore.AddToStore(SessionInfoStoreConstants.USER_OPTIONS, dtsystemuseroptions.Columns("SYSTEM_USER_OPTION"))
        End If
        If dtsystemuseroptions Is Nothing Then
            Trace.TraceError("System User Options is not defined")
        End If
    End Sub

    Private Sub __SetSessionTimeOut()
        Dim intSessionTimeOut As Integer
        Dim strSysSetup As String = UICache.GetSysSetupValue("SESSION", "SESSION_TIMEOUT")
        If Not strSysSetup Is Nothing AndAlso strSysSetup <> "" Then
            intSessionTimeOut = CInt(strSysSetup)
            SessionInfoStore.SetTimeOut(intSessionTimeOut)
            'Else
            'System Level Session Timeout
            '    Dim dtSysRoles As DataTable = UICache.GetSys_Roles(SessionInfoStore.Item(SessionInfoStoreConstants.S_ID))
            '    If Not dtSysRoles Is Nothing AndAlso dtSysRoles.Rows.Count > 0 Then
            '        If Not IsDBNull(dtSysRoles.Rows(0)("SESSION_TIMEOUT")) Then
            '            intSessionTimeOut = CInt(dtSysRoles.Rows(0)("SESSION_TIMEOUT"))
            '            SessionInfoStore.SetTimeOut(intSessionTimeOut)
            '        End If
            '    End If
        End If
    End Sub

#End Region

#Region "METHODS - LICENSE"
    Dim dtApplications As New DataTable
    Dim dtSystems As New DataTable

    Private Function FilterLicenseData(ByVal pFilterParam As String) As DataTable
        Dim vwLicense As DataTable = UICache.GetLicenseDetails()
        If vwLicense.Rows.Count > 0 Then
            vwLicense.DefaultView.RowFilter = "LICENSE_TYPE='" & pFilterParam & "'"
            vwLicense = vwLicense.DefaultView.ToTable()
        End If
        Return vwLicense
    End Function
    Private Sub ValidateSystemsLicense(ByVal pChild As Systems)
        dtSystems = FilterLicenseData("SYSTEM_TYPE")
        If dtSystems.Rows.Count > 0 Then
            Dim drFirstRow As DataRow = dtSystems.Rows(0)
            Select Case drFirstRow("LH_COUNT")
                Case 0
                    IsEnableSystems(pChild, "N")
                Case Is < 0
                    IsEnableSystems(pChild, "Y")
                Case Is > 0
                    IsEnableSystems(pChild, "N")
                    For i As Integer = 0 To pChild.Count - 1
                        ValidateSysLicense(pChild(i), "", New Object)
                    Next
            End Select
        Else
            IsEnableSystems(pChild, "N")
        End If
    End Sub
    Private Sub IsEnableSystems(ByVal pSystems As Systems, ByVal bool As String)
        For i As Integer = 0 To pSystems.Count - 1
            SystemsEnable(pSystems(i), bool)
        Next
    End Sub
    Private Sub SystemsEnable(ByVal pChild As DPSSystem, ByVal bool As String)
        If pChild.IS_ENABLE = "Y" Then
            pChild.IS_ENABLE = bool
        End If
        Dim lstSystems As List(Of DPSSystem) = (From syst In pChild.Systems Order By syst.ST_CODE Distinct).ToList
        For Each DPS As DPSSystem In lstSystems
            SystemsEnable(DPS, bool)
        Next
    End Sub
    Private Sub ValidateSysLicense(ByVal pChild As DPSSystem, ByVal level As String, License_Validity_Periods As Object)
        Dim lstSystems As List(Of DPSSystem) = (From syst In pChild.Systems Order By syst.ST_CODE Distinct).ToList
        Dim LicenseDetails = (From dr In dtSystems Where dr.Field(Of String)("LICENSE_DETAIL") = pChild.S_ID Select New With {.ParentLevel = "Y", .ValidityFrom = dr.Field(Of Date)("LH_VALIDITY_FROM"), .ValidityTo = dr.Field(Of Date)("LH_VALIDITY_TO")}).ToList
        Dim Parent_Level As String = Nothing
        If LicenseDetails.Count = 0 OrElse LicenseDetails(0).ParentLevel Is Nothing Then Parent_Level = level Else Parent_Level = LicenseDetails(0).ParentLevel

        Dim SetLicenseValidity = Function(ValidityDetails)
                                     Dim LicenseValidity As Object = Nothing
                                     If ValidityDetails.Count > 0 Then
                                         LicenseValidity = New With {.ValidityFrom = ValidityDetails(0).ValidityFrom, .ValidityTo = ValidityDetails(0).ValidityTo}
                                     Else
                                         If License_Validity_Periods IsNot Nothing Then
                                             LicenseValidity = New With {.ValidityFrom = License_Validity_Periods.ValidityFrom, .ValidityTo = License_Validity_Periods.ValidityTo}
                                         End If
                                     End If
                                     Return LicenseValidity
                                 End Function

        If lstSystems.Count > 0 Then
            For i As Integer = 0 To lstSystems.Count - 1
                If Parent_Level = "Y" Then
                    pChild.IS_ENABLE = "Y"
                    pChild.LICENSE_VALIDITY = SetLicenseValidity(LicenseDetails)
                    CType(lstSystems(i), DPSSystem).IS_ENABLE = "Y"
                    ValidateSysLicense(CType(lstSystems(i), DPSSystem), "Y", pChild.LICENSE_VALIDITY)
                End If

                Dim DPSSys As DPSSystem = CType(lstSystems(i), DPSSystem)
                If DPSSys.IS_ENABLE = "N" Then
                    Dim ChildLicenseDetails = (From dr In dtSystems Where dr.Field(Of String)("LICENSE_DETAIL") = DPSSys.S_ID Select New With {.ChildLevel = "Y", .ValidityFrom = dr.Field(Of Date)("LH_VALIDITY_FROM"), .ValidityTo = dr.Field(Of Date)("LH_VALIDITY_TO")}).ToList

                    Dim Child_Level As String = Nothing
                    If ChildLicenseDetails.Count = 0 OrElse ChildLicenseDetails(0).ChildLevel Is Nothing Then Child_Level = level Else Child_Level = ChildLicenseDetails(0).ChildLevel

                    If Child_Level = "Y" Then
                        DPSSys.IS_ENABLE = "Y"
                        DPSSys.LICENSE_VALIDITY = SetLicenseValidity(LicenseDetails)
                        ValidateSysLicense(CType(lstSystems(i), DPSSystem), "Y", DPSSys.LICENSE_VALIDITY)
                    Else
                        ValidateSysLicense(CType(lstSystems(i), DPSSystem), "", DPSSys.LICENSE_VALIDITY)
                    End If
                End If
            Next
        Else
            If Parent_Level = "Y" Then
                pChild.IS_ENABLE = "Y"
                pChild.LICENSE_VALIDITY = SetLicenseValidity(LicenseDetails)
            End If

        End If
    End Sub
    Private Function validateApplicationLicense(ByVal pAppId As Integer, selApp As DPSApplication)
        If dtApplications.Rows.Count > 0 Then
            Dim drFirstRow As DataRow = dtApplications.Rows(0)
            If drFirstRow("LH_COUNT") = 0 Then Return "False"
            If drFirstRow("LH_COUNT") < 0 Then Return "True"
            Dim AppLicenseDetails As Object = Nothing
            Dim IsAppliedLicense As String = "False"
            AppLicenseDetails = (From drRow In dtApplications
                                                               Where pAppId = drRow.Field(Of String)("LICENSE_DETAIL") Select New With {.AppLicense = "True", .ValidityFrom = drRow.Field(Of Date)("LH_VALIDITY_FROM"), .ValidityTo = drRow.Field(Of Date)("LH_VALIDITY_TO")}).ToList
            If AppLicenseDetails.Count > 0 Then
                selApp.VALIDITY_LICENSE = New With {.AppLicense = "True", .ValidityFrom = AppLicenseDetails(0).ValidityFrom, .ValidityTo = AppLicenseDetails(0).ValidityTo}
                IsAppliedLicense = AppLicenseDetails(0).AppLicense()
            End If
            Return IsAppliedLicense
        End If
        Return "False"
    End Function
    Public Shared Function CheckDateExpired(ByVal ValidityFrom As Date, ValidityTo As Date) As Boolean
        Try
            If Not ValidityFrom = Date.MinValue Then
                Dim intStartDays As Integer = DateTime.Now.Date.Subtract(ValidityFrom).Days
                Dim datEnd As Date = Nothing
                If Not ValidityTo = Date.MinValue Then
                    Dim intEndDays As Integer = DateTime.Now.Date.Subtract(ValidityTo).Days
                    If intStartDays < 0 Or intEndDays > 0 Then
                        Return False
                    End If
                End If
            End If
            Return True
        Catch ex As Exception
            Trace.WriteLine("Error Date Validity")
        End Try
        Return False
    End Function
#End Region

End Class

Friend Class DPSApplications
    Inherits ObservableCollection(Of DPSApplication)

End Class

Friend Class DPSApplication

    Public Property APP_ID As Integer = 0
    Public Property APPU_ID As Integer = 0
    Public Property APP_CODE As String = ""
    Public Property ROLE_LEVEL As String = ""
    Public Property APP_DESCRIPTION As String = ""
    Public Property ICON_DATA As Byte() = Nothing
    Public Property VALIDITY_LICENSE As Object = Nothing
    Public Sub FillData(pType As Type, pInstance As Object, pData As DataRow)
        Dim objType As Type = pType
        Dim props As PropertyDescriptorCollection = TypeDescriptor.GetProperties(pType)
        For Each dc As DataColumn In pData.Table.Columns
            Dim pd As PropertyDescriptor = props(dc.ColumnName)
            If pd Is Nothing OrElse pData(dc.ColumnName).ToString() = "" Then
                Continue For
            End If
            pd.SetValue(pInstance, pData(dc.ColumnName))
        Next

    End Sub

End Class

Public Class ImageConverter
    Implements IValueConverter

    Public Function Convert(value As Object, targetType As System.Type, parameter As Object, culture As System.Globalization.CultureInfo) As Object Implements System.Windows.Data.IValueConverter.Convert
        Dim bmi As New BitmapImage
        bmi.BeginInit()
        If TypeOf (value) Is Byte() Then
            bmi.StreamSource = New MemoryStream(value, False)
        Else
            Dim ms As New MemoryStream
            If Not parameter Is Nothing AndAlso parameter.ToString = "APPLICATIONS" Then
                My.Resources.DefaultApp.Save(ms, System.Drawing.Imaging.ImageFormat.Png)
            Else
                My.Resources.DefaultSystem.Save(ms, System.Drawing.Imaging.ImageFormat.Png)
            End If
            bmi.StreamSource = ms
        End If
        bmi.EndInit()
        Return bmi
        Return Nothing
    End Function

    Public Function ConvertBack(value As Object, targetType As System.Type, parameter As Object, culture As System.Globalization.CultureInfo) As Object Implements System.Windows.Data.IValueConverter.ConvertBack
        Throw New NotImplementedException
    End Function
End Class